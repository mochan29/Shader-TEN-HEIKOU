#include "Direct3D.h"
#include <d3dcompiler.h>
#include "Define.h"

namespace Direct3D
{
	ID3D11Device* pDevice; //デバイス(Direct3Dそのもの)
	ID3D11DeviceContext* pContext; //デバイスコンテキスト(描画処理)
	IDXGISwapChain* pSwapChain; //スワップチェイン(バッファをスワップ)
	ID3D11RenderTargetView* pRenderTargetView; //レンダーターゲットビュー(描く所にアクセスするためのもの)
	ID3D11VertexShader* pVertexShader = nullptr; //頂点シェーダー
	ID3D11PixelShader* pPixelShader = nullptr; //ピクセルシェーダー
	ID3D11InputLayout* pVertexLayout = nullptr; //頂点インプットレイアウト
	ID3D11RasterizerState* pRasterizerState = nullptr; //ラスタライザー

	ID3D11Texture2D* pDepthStencil;//深度ステンシル
	ID3D11DepthStencilView* pDepthStencilView; //深度ステンシルビュー

	XMINT2 WindowSize;

	struct SHADER_BUNDLE
	{
		ID3D11VertexShader* pVertexShader_ = nullptr; //頂点シェーダー
		ID3D11PixelShader* pPixelShader_ = nullptr; //ピクセルシェーダー
		ID3D11InputLayout* pVertexLayout_ = nullptr; //頂点インプットレイアウト
		ID3D11RasterizerState* pRasterizerState_ = nullptr; //ラスタライザー
	};

	SHADER_BUNDLE shaderBundle[SHADER_MAX];
	XMFLOAT4 lightPos = {0,0.5,0,0};
}

HRESULT Direct3D::Initialize(int winW, int winH, HWND hWnd)
{
	HRESULT hr;

	///////////////////////////いろいろ準備するための設定///////////////////////////////
	//いろいろな設定項目をまとめた構造体
	DXGI_SWAP_CHAIN_DESC scDesc;

	//とりあえず全部0
	ZeroMemory(&scDesc, sizeof(scDesc));

	//描画先のフォーマット
	scDesc.BufferDesc.Width = winW; //画面幅
	scDesc.BufferDesc.Height = winH; //画面高さ
	scDesc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM; //何色使えるか

	//FPS(1/60秒に1回)
	scDesc.BufferDesc.RefreshRate.Numerator = 60;
	scDesc.BufferDesc.RefreshRate.Denominator = 1;

	//その他
	scDesc.Windowed = TRUE; //ウィンドウモードかフルスクリーンか
	scDesc.OutputWindow = hWnd; //ウィンドウハンドル
	scDesc.BufferCount = 1; //バックバッファの枚数
	scDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT; //バックバッファの使い道＝画面に描画するために
	scDesc.SampleDesc.Count = 1; //MSAA(アンチエイリアス)の設定
	scDesc.SampleDesc.Quality = 0; //同上

	////////////////上記設定をもとにデバイス、コンテキスト、スワップチェインを作成////////////////////////
	D3D_FEATURE_LEVEL level;
	hr = D3D11CreateDeviceAndSwapChain(
		nullptr, //どのビデオアダプタを使用するか?既定ならばnullptrで
		D3D_DRIVER_TYPE_HARDWARE,//ドライバのタイプを渡す、ふつうはHARDWARE
		nullptr,//上記をD3D_DRIVER_TYPE_SOFTWAREに設定しないかぎりnullptr
		0, //何らかのフラグを指定する(デバッグ時はD3D11_CREATE_DEVICE_DEBUG)
		nullptr, //デバイス、コンテキストのレベルを設定、nullptrにしとけばOK
		0, //上の引数でレベルを何個指定したか
		D3D11_SDK_VERSION, //SDKのバージョン、必ずこの値
		&scDesc, //上でいろいろ設定した構造体
		&pSwapChain, //無事完成したSwapChainのアドレスが返ってくる
		&pDevice, //無事完成したDeviceアドレスが返ってくる
		&level, //無事完成したDevice、Contextのレベルが返ってくる
		&pContext); //無事完成したContextのアドレスが返ってくる
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: スワップチェーン作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	///////////////////////////レンダーターゲットビュー作成///////////////////////////////
	//スワップチェーンからバックバッファを取得(バックバッファ ＝ レンダーターゲット)
	ID3D11Texture2D* pBackBuffer;
	pSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);

	//レンダーターゲットビューを作成
	//もしエラー出たらif(pBackBuffer!=0)を消しておく
	if (pBackBuffer != 0)
	{
		hr = pDevice->CreateRenderTargetView(pBackBuffer, NULL, &pRenderTargetView);
		if (FAILED(hr))
		{
			MessageBox(nullptr, L"失敗: レンダーターゲットビュー作成", L"Direct3D.cpp", MB_OK);
			return hr;
		}
	}

	//一時的にバックバッファを取得しただけなので解放
	SAFE_RELEASE(pBackBuffer);

	///////////////////////////ビューポート(描画範囲)設定///////////////////////////////
	//レンダリング結果を表示する範囲
	D3D11_VIEWPORT vp;
	vp.Width = (float)winW;	//幅
	vp.Height = (float)winH; //高さ
	vp.MinDepth = 0.0f;	//手前
	vp.MaxDepth = 1.0f; //奥
	vp.TopLeftX = 0; //左
	vp.TopLeftY = 0; //上

	//深度ステンシルビューの作成
	D3D11_TEXTURE2D_DESC descDepth;
	descDepth.Width = winW;
	descDepth.Height = winH;
	descDepth.MipLevels = 1;
	descDepth.ArraySize = 1;
	descDepth.Format = DXGI_FORMAT_D32_FLOAT;
	descDepth.SampleDesc.Count = 1;
	descDepth.SampleDesc.Quality = 0;
	descDepth.Usage = D3D11_USAGE_DEFAULT;
	descDepth.BindFlags = D3D11_BIND_DEPTH_STENCIL;
	descDepth.CPUAccessFlags = 0;
	descDepth.MiscFlags = 0;
	hr = pDevice->CreateTexture2D(&descDepth, NULL, &pDepthStencil);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: モデルの2Dテクスチャ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}
	hr = pDevice->CreateDepthStencilView(pDepthStencil, NULL, &pDepthStencilView);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 深度ステンシルビュー作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//データを画面に描画するための一通りの設定(パイプライン)
	pContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST); //データの入力種類を指定
	pContext->OMSetRenderTargets(1, &pRenderTargetView, pDepthStencilView); //描画先を設定
	pContext->RSSetViewports(1, &vp);

	//シェーダー準備
	hr = InitShader();
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: シェーダー準備", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	WindowSize = { winW,winH };

	return S_OK;
}

HRESULT Direct3D::InitShader2D()
{
	//--------2D用開始-----------------------------------------------
	HRESULT hr;
	//頂点シェーダの作成(コンパイル)
	ID3DBlob* pCompileVS = nullptr;
	D3DCompileFromFile(L"Engine//Simple2D.hlsl", nullptr, nullptr, "VS", "vs_5_0", NULL, 0, &pCompileVS, NULL);

	hr = pDevice->CreateVertexShader(pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_2D].pVertexShader_);
	//エラーだったらプログラム終了
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点シェーダの作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//頂点インプットレイアウト作成->頂点情報だけを渡している
	D3D11_INPUT_ELEMENT_DESC layout[] = {
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 }, //位置
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, sizeof(DirectX::XMVECTOR) , D3D11_INPUT_PER_VERTEX_DATA, 0 }, //UV座標
	};
	assert(pCompileVS != nullptr);
	hr = pDevice->CreateInputLayout(layout, 2, pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), &shaderBundle[SHADER_TYPE::SHADER_2D].pVertexLayout_);
	SAFE_RELEASE(pCompileVS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点インプットレイアウト作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ピクセルシェーダ作成(コンパイル)
	ID3DBlob* pCompilePS = nullptr;
	D3DCompileFromFile(L"Engine//Simple2D.hlsl", nullptr, nullptr, "PS", "ps_5_0", NULL, 0, &pCompilePS, NULL);
	assert(pCompilePS != nullptr);
	hr = pDevice->CreatePixelShader(pCompilePS->GetBufferPointer(), pCompilePS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_2D].pPixelShader_);
	SAFE_RELEASE(pCompilePS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ピクセルシェーダ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ラスタライザ作成
	D3D11_RASTERIZER_DESC rdc = {};
	rdc.CullMode = D3D11_CULL_BACK; //多角形の裏側は描画しない(カリング)
	rdc.FillMode = D3D11_FILL_SOLID; //多角形の内部を塗りつぶす()
	//rdc.FillMode = D3D11_FILL_WIREFRAME; //ワイヤーフレーム表示
	rdc.FrontCounterClockwise = FALSE; //半時計回りを表にする、がFALSE=時計回りが表
	hr = pDevice->CreateRasterizerState(&rdc, &shaderBundle[SHADER_TYPE::SHADER_2D].pRasterizerState_);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ラスタライザ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}
	//--------2D用終了-----------------------------------------------
	return S_OK;
}

HRESULT Direct3D::InitShader3D()
{
	//--------3D用開始-----------------------------------------------
	HRESULT hr;

	//頂点シェーダの作成(コンパイル)
	ID3DBlob* pCompileVS = nullptr;
	D3DCompileFromFile(L"Engine//Simple3D.hlsl", nullptr, nullptr, "VS", "vs_5_0", NULL, 0, &pCompileVS, NULL);
	hr = pDevice->CreateVertexShader(pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_3D].pVertexShader_);
	//エラーだったらプログラム終了
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点シェーダの作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//頂点インプットレイアウト作成->頂点情報だけを渡している
	D3D11_INPUT_ELEMENT_DESC layout[] = {
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 }, //位置
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, sizeof(DirectX::XMVECTOR) , D3D11_INPUT_PER_VERTEX_DATA, 0 }, //UV座標
		{ "NORMAL",	0, DXGI_FORMAT_R32G32B32_FLOAT, 0, sizeof(DirectX::XMVECTOR) * 2 ,	D3D11_INPUT_PER_VERTEX_DATA, 0 },//法線
	};
	assert(pCompileVS != nullptr);
	hr = pDevice->CreateInputLayout(layout, 3, pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), &shaderBundle[SHADER_TYPE::SHADER_3D].pVertexLayout_);
	SAFE_RELEASE(pCompileVS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点インプットレイアウト作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ピクセルシェーダ作成(コンパイル)
	ID3DBlob* pCompilePS = nullptr;
	D3DCompileFromFile(L"Engine//Simple3D.hlsl", nullptr, nullptr, "PS", "ps_5_0", NULL, 0, &pCompilePS, NULL);
	assert(pCompilePS != nullptr);
	hr = pDevice->CreatePixelShader(pCompilePS->GetBufferPointer(), pCompilePS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_3D].pPixelShader_);
	SAFE_RELEASE(pCompilePS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ピクセルシェーダ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ラスタライザ作成
	D3D11_RASTERIZER_DESC rdc = {};
	rdc.CullMode = D3D11_CULL_BACK; //多角形の裏側は描画しない(カリング)
	rdc.FillMode = D3D11_FILL_SOLID; //多角形の内部を塗りつぶす()
	//rdc.FillMode = D3D11_FILL_WIREFRAME; //ワイヤーフレーム表示
	rdc.FrontCounterClockwise = FALSE; //半時計回りを表にする、がFALSE=時計回りが表
	hr = pDevice->CreateRasterizerState(&rdc, &shaderBundle[SHADER_TYPE::SHADER_3D].pRasterizerState_);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ラスタライザ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}
	//--------3D用終了-----------------------------------------------
	return S_OK;
}

HRESULT Direct3D::InitPointShader()
{
	//--------点光源用開始-----------------------------------------------
	HRESULT hr;

	//頂点シェーダの作成(コンパイル)
	ID3DBlob* pCompileVS = nullptr;
	D3DCompileFromFile(L"Engine//PointShader.hlsl", nullptr, nullptr, "VS", "vs_5_0", NULL, 0, &pCompileVS, NULL);
	hr = pDevice->CreateVertexShader(pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_POINT].pVertexShader_);
	//エラーだったらプログラム終了
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点シェーダの作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//頂点インプットレイアウト作成->頂点情報だけを渡している
	D3D11_INPUT_ELEMENT_DESC layout[] = {
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 }, //位置
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, sizeof(DirectX::XMVECTOR) , D3D11_INPUT_PER_VERTEX_DATA, 0 }, //UV座標
		{ "NORMAL",	0, DXGI_FORMAT_R32G32B32_FLOAT, 0, sizeof(DirectX::XMVECTOR) * 2 ,	D3D11_INPUT_PER_VERTEX_DATA, 0 },//法線
	};
	assert(pCompileVS != nullptr);
	hr = pDevice->CreateInputLayout(layout, 3, pCompileVS->GetBufferPointer(), pCompileVS->GetBufferSize(), &shaderBundle[SHADER_TYPE::SHADER_POINT].pVertexLayout_);
	SAFE_RELEASE(pCompileVS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: 頂点インプットレイアウト作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ピクセルシェーダ作成(コンパイル)
	ID3DBlob* pCompilePS = nullptr;
	D3DCompileFromFile(L"Engine//PointShader.hlsl", nullptr, nullptr, "PS", "ps_5_0", NULL, 0, &pCompilePS, NULL);
	assert(pCompilePS != nullptr);
	hr = pDevice->CreatePixelShader(pCompilePS->GetBufferPointer(), pCompilePS->GetBufferSize(), NULL, &shaderBundle[SHADER_TYPE::SHADER_POINT].pPixelShader_);
	SAFE_RELEASE(pCompilePS);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ピクセルシェーダ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}

	//ラスタライザ作成
	D3D11_RASTERIZER_DESC rdc = {};
	rdc.CullMode = D3D11_CULL_BACK; //多角形の裏側は描画しない(カリング)
	rdc.FillMode = D3D11_FILL_SOLID; //多角形の内部を塗りつぶす()
	//rdc.FillMode = D3D11_FILL_WIREFRAME; //ワイヤーフレーム表示
	rdc.FrontCounterClockwise = FALSE; //半時計回りを表にする、がFALSE=時計回りが表
	hr = pDevice->CreateRasterizerState(&rdc, &shaderBundle[SHADER_TYPE::SHADER_POINT].pRasterizerState_);
	if (FAILED(hr))
	{
		MessageBox(nullptr, L"失敗: ラスタライザ作成", L"Direct3D.cpp", MB_OK);
		return hr;
	}
	//--------点光源用終了-----------------------------------------------
	return S_OK;
}

HRESULT Direct3D::InitShader()
{
	if (FAILED(InitShader2D()))
	{
		return E_FAIL;
	}
	if (FAILED(InitShader3D()))
	{
		return E_FAIL;
	}
	if (FAILED(InitPointShader()))
	{
		return E_FAIL;
	}
	return S_OK;
}

void Direct3D::SetShader(SHADER_TYPE type)
{
	//それぞれをデバイスコンテキストにセット
	pContext->VSSetShader(shaderBundle[type].pVertexShader_, NULL, 0); //頂点シェーダー
	pContext->PSSetShader(shaderBundle[type].pPixelShader_, NULL, 0); //ピクセルシェーダー
	pContext->IASetInputLayout(shaderBundle[type].pVertexLayout_); //頂点インプットレイアウト
	pContext->RSSetState(shaderBundle[type].pRasterizerState_); //ラスタライザー
}

void Direct3D::BeginDraw()
{
	//背景の色
	float clearColor[4] = { 0.94f,0.97f,1.0f, 1.0f }; //R,G,B,A

	//画面をクリア デバイスコンテキスト(絵を描く人)の初仕事
	pContext->ClearRenderTargetView(pRenderTargetView, clearColor);

	//深度バッファクリア
	pContext->ClearDepthStencilView(pDepthStencilView, D3D11_CLEAR_DEPTH, 1.0f, 0);
}

void Direct3D::EndDraw()
{
	//スワップ(バックバッファを表に表示する)
	pSwapChain->Present(0, 0);
}

void Direct3D::Release()
{
	//シェーダーの解放
	SAFE_RELEASE(pRasterizerState);
	SAFE_RELEASE(pVertexLayout);
	SAFE_RELEASE(pPixelShader);
	SAFE_RELEASE(pVertexShader);

	//描画に必要なオブジェクトの解放
	SAFE_RELEASE(pRenderTargetView);
	SAFE_RELEASE(pSwapChain);
	SAFE_RELEASE(pContext);
	SAFE_RELEASE(pDevice);

	//Zバッファ関連の解放
	SAFE_RELEASE(pDepthStencil);
	SAFE_RELEASE(pDepthStencilView);
}

XMFLOAT4 Direct3D::GetLightPos()
{
	return lightPos;
}

void Direct3D::SetLightPos(XMFLOAT4 pos)
{
	lightPos = pos;
}
